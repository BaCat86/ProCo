# Users
В таблице Users хранятся все пользователи следующим образом:
- ID - N-N, уникальный идентификатор пользователя, который задаётся автоматически программно и необходим для обращения процессов программы к пользователю.
- login - N-N, уникальное имя пользователя, которое необходимо для понимания самим пользователем в какой аккаунт он входит. Так как un напрямую связан с id, он должен быть уникальным и не может повторяться.
- password - N-N, пароль для доступа к аккаунту (доступу к портфолио)
- last_seen - Время последнего посещения пользователя (необходимо в целях безопасности)
- email - N-N, уникальная почта, необходимая в целях безопасности (уведомления о входе в аккаунт, восстановление пароля)

Комментарий: я не уверен, но возможно ещё стоит добавить поле last_Ip, что бы в случа входа с нового ip пользователь был уведомлён на почту. И кстати, а как реализовать функцию срочного выхода из аккаунта, к примеру, при взломе аккаунта

# Portfolios
В таблице Portfolios хранятся все портфолио всех пользователей следующим образом:
- ID - N-N, уникальный идентификатор портфолио, который задаётся автоматически программно и необходим для обращения процессов программы к портфолио. (Так как в одной таблице хранятся все портфолио, то нудо будет передавать от сервера к клиенту только те портфолио, которые принадлежат его id)
- userID - N-N, уникальный идентификатор пользователя, который уже задан в таблице Users, необходим для понимания, какое портфолио какому пользователю принадлежит
- Name - N-N, имя портфолио, которое необходимо для понимания самим пользователем что это за портфолио.
- pictutres - изображение портфолио (как я понимаю, его значение будет принадлежать к типу TEXT и означать путь к изображинию (А значит, тоже должно быть уникальным)). В случае отсутствии значения (или какого-то базового значения, я не знаю, что удобнее и правельнее) фото будет заменено на первые буквы имени (ну типо как при отсутвии аватарки в телеграме)

# Tags
В таблице Tags хранятся все тэги следующим образом:
- ID - N-N, уникальный идентификатор тэга, который задаётся автоматически программно.
- Name - N-N, название тэга, что это вообще за тэг.

# Attr
В таблице Attr хранятся сами атрибуты следующим образом:
- ID - N-N, уникальный идентификатор атрибута, который задаётся автоматически программно.
- Name - N-N, имя атрибута.
- desc - описание атрибута.

Комментарий: какие-то базовые атрибуты, такие как номер телефона, дата рождения и т.п., мы будем добавлять в таблицу по умолчанию через SQL-скрипт через команду INSERT.

# attrAssign
(сокращение от attrAssign - назначение атрибутов)
Таблица attrAssign необходима для связи портфолио с атрибутами и приданию им значений следующим образом:
- ID - N-N, уникальный идентификатор связи, который задаётся автоматически программно.
- ptfID - N-N, уникальный идентификатор портфолио, который задаётся автоматически программно. Необходим для понимания, какое портфолио имеет данный атрибут
- attrID - N-N, уникальный идентификатор атрибута, который задаётся автоматически программно. Необходим для понимания, какой именно атрибут используется
- value - значение атрибута
- order - необходим для понимания положения атрибута в портфоли

Комментарий: в случае, если order равняется нулю или отрицательному числу (просто я не знаю как лучше сделать, с одной стороны в программировании отсчёт с нуля, а с другой, отрицательное число делать как-то не хорошо), атрибут не будет отображаться (нужно, для того, что бы пользователю не мешали базовые атрибуты, в случае, если он намеренно их удалил)
